{"version":3,"sources":["components/Main.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","subject","location","time","react_default","a","createElement","Col","xs","className","Main","state","index","onPageChange","direction","_this","setState","this","window","localStorage","removeItem","reload","_this2","_this$props","props","schedule","subjectCode","item","RenderData","Object","keys","forEach","key","length","str","slice","indexOf","endsWith","time1","parseInt","push","console","log","CardRender","map","Main_Card","style","height","width","Container","fluid","Row","day","margin","dist_default","orientation","responsive","loopForever","animationDuration","startAt","ButtonGroup","Button","variant","onClick","onClickLeft","onClickRight","border","marginTop","textDecoration","Reset","Component","required","val","FormComponent","values","batch","CS_elective","HSS_elective","elective","Other_elective","batchRegex","regex","RegExp","mySchedule","Schedule","newObject","filter","element","match","setItem","JSON","stringify","sm","lib","onSubmit","handleSubmit","text","model","id","name","placeholder","validators","show","messages","type","color","App","parse","getItem","Form","components_Main","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9c0e75f2.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Container, Row, ButtonGroup, Button, Col } from 'react-bootstrap'\nimport FlipPage from 'react-flip-page'\n\nconst Card = ({ subject, location, time }) => {\n    return (\n        <Col xs={12}>\n            <p className='mb-0'>{subject}</p>\n            <p className='mt-0'>{time} | {location}</p>\n        </Col>\n    )\n}\n\nclass Main extends Component {\n\n    state = {\n        index: 0,\n    }\n\n    onPageChange = (index, direction) => {\n        this.setState({\n            index\n        })\n    }\n\n    onClickLeft() {\n        this.setState({\n            index: this.state.index === 0 ? 5 : this.state.index - 1\n        })\n    }\n\n    onClickRight() {\n        this.setState({\n            index: this.state.index === 5 ? 0 : this.state.index + 1\n        })\n    }\n\n    Reset() {\n        window.localStorage.removeItem('schedule')\n        window.location.reload()\n    }\n\n    render() {\n\n        const { schedule, subjectCode } = this.props\n        const item = schedule[this.state.index]\n        let RenderData = []\n\n        Object.keys(item)\n            .forEach((key, index) => {\n                if (index > 0 && item[key].length > 0) {\n\n                    let str = item[key][0]\n                    let time = ''\n                    let subject = subjectCode[str.slice(str.indexOf('(') + 1,\n                        str.indexOf(')'))]\n                    let location = str.slice(str.indexOf(')') + 2, str.indexOf('/'))\n\n                    if (subject.endsWith('Lab')) {\n                        let time1 = parseInt(key.slice(0, key.indexOf('-')))\n                        time = time1 + '-' + (time1 + 1) + ':50' + key.slice(key.length - 2, key.length)\n                    }\n                    else\n                        time = key\n                    RenderData.push({ time, subject, location })\n                }\n            })\n        console.log(RenderData)\n        const CardRender = RenderData.map(item => {\n            return <Card\n                subject={item.subject}\n                style={{ height: 300, width: 100 }}\n                location={item.location}\n                time={item.time} />\n        })\n\n        return (\n\n            <Container fluid className='text-center'>\n                <Row>\n                    <Col xs={12}>\n                        <h2 className='mt-4'>{schedule[this.state.index].day}</h2>\n                    </Col>\n                    <div className=\"flip-root mb-2\" style={{ margin: 'auto' }}>\n                        <FlipPage\n                            orientation='horizontal'\n                            responsive={true}\n                            loopForever={true}\n                            onPageChange={this.onPageChange}\n                            animationDuration={300}\n                            startAt={0}\n                        >\n                            <div className=\"card_list\">{CardRender}</div>\n                            <div className=\"card_list\">{CardRender}</div>\n                            <div className=\"card_list\">{CardRender}</div>\n                            <div className=\"card_list\">{CardRender}</div>\n                            <div className=\"card_list\">{CardRender}</div>\n                            <div className=\"card_list\">{CardRender}</div>\n                        </FlipPage>\n                    </div>\n                    <Col xs={12}>\n                        <ButtonGroup>\n                            <Button variant=\"secondary\"\n                                onClick={() => this.onClickLeft()}\n                            >Left</Button>\n                            <Button variant=\"secondary\"\n                                onClick={() => this.onClickRight()}\n                            >Right</Button>\n                        </ButtonGroup>\n                    </Col>\n                    <Col xs={12}>\n                        <Button\n                            style={{ border: 0, marginTop: 50, textDecoration: 'underline' }}\n                            onClick={() => this.Reset()}>Reset</Button>\n                    </Col>\n                </Row>\n            </Container >\n        )\n    }\n}\n\nexport default Main","import React, { Component } from 'react'\nimport { Button, Row, Col, Container } from 'react-bootstrap'\nimport { Control, LocalForm, Errors } from 'react-redux-form'\nimport Schedule from '../data/schedule.json'\n\nconst required = (val) => val && val.length\nconst maxLength = (len) => (val) => !(val) || (val.length <= len)\nconst minLength = (len) => (val) => val && (val.length >= len)\nconst isNumber = (val) => !isNaN(Number(val))\n\nclass FormComponent extends Component {\n\n    handleSubmit(values) {\n\n        console.log(values)\n\n        const batch = values.batch\n        const CS_elective = values.CS_elective\n        const HSS_elective = values.HSS_elective\n        const elective = values.Other_elective\n\n        const batchRegex = batch.length == 2 ?\n            '(' + batch + '|' + 'LAB\\\\(' + '|' + batch[0] + '[1-' + batch[1] +\n            ']-([' + batch[1] + '-9]|1\\\\d))'\n            : '(' + batch + '|' + 'LAB\\\\(' + '|' + batch[0] + '.*(1[0-' + batch[2] +\n            ']-1[' + batch[2] + '-4]|,' + batch.slice(1, 3) + ')' + ')'\n\n        const CS_elect_lab = CS_elective === 'CI514' ? 'CI574' : 'CI573'\n        const compulsory = 'CI511|CI571|CI575|CI576'\n        const regex = new RegExp(batchRegex + \".*(\" + HSS_elective + '|' + elective + '|'\n            + CS_elective + '|' + CS_elect_lab + '|' + compulsory + ')')\n        console.log(regex)\n\n        const mySchedule = Schedule.map(item => {\n            let newObject = {}\n            Object.keys(item).forEach((key, index) => {\n\n                if (index === 0)\n                    newObject[key] = item[key]\n                else\n                    newObject[key] = item[key].filter(element => element.match(regex))\n            });\n\n            return newObject\n        })\n\n        console.log(mySchedule)\n        window.localStorage.setItem('schedule', JSON.stringify(mySchedule))\n        window.location.reload()\n    }\n\n    render() {\n        return (\n            <Container>\n                <Row className='justify-content-center' >\n                    <Col xs={12} sm={4}>\n                        <Row>\n                            <Col xs={12} className='text-center mt-4'>\n                                <h2><b>LETS START</b></h2>\n                            </Col>\n                            <Col xs={12} className='mt-4'>\n                                <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\n                                    <Row className=\"form-group\">\n                                        <Col xs={12}>\n                                            <Control.text model=\".batch\"\n                                                id=\"batch\" name=\"batch\"\n                                                placeholder=\"batch\"\n                                                className=\"form-control\"\n                                                validators={{\n                                                    required\n                                                }}\n                                            />\n                                            <Errors\n                                                className=\"text-danger  \"\n                                                model=\".batch\"\n                                                show=\"touched\"\n                                                messages={{\n                                                    required: 'Required',\n                                                }}\n                                            />\n                                        </Col>\n                                    </Row>\n\n                                    <Row className=\"form-group\">\n                                        <Col xs={12}>\n                                            <Control.text model=\".CS_elective\"\n                                                id=\"CS_elective\" name=\"CS_elective\"\n                                                placeholder=\"CS_elective\"\n                                                className=\"form-control\"\n                                                validators={{\n                                                    required\n                                                }}\n                                            />\n                                            <Errors\n                                                className=\"text-danger\"\n                                                model=\".CS_elective\"\n                                                show=\"touched\"\n                                                messages={{\n                                                    required: 'Required',\n                                                }}\n                                            />\n                                        </Col>\n                                    </Row>\n\n                                    <Row className=\"form-group\">\n                                        <Col xs={12}>\n                                            <Control.text model=\".HSS_elective\"\n                                                id=\"HSS_elective\" name=\"HSS_elective\"\n                                                placeholder=\"HSS_elective\"\n                                                className=\"form-control\"\n                                                validators={{\n                                                    required\n                                                }}\n                                            />\n                                            <Errors\n                                                className=\"text-danger\"\n                                                model=\".HSS_elective\"\n                                                show=\"touched\"\n                                                messages={{\n                                                    required: 'Required',\n                                                }}\n                                            />\n                                        </Col>\n                                    </Row>\n\n                                    <Row className=\"form-group\">\n                                        <Col xs={12}>\n                                            <Control.text model=\".Other_elective\"\n                                                id=\"Other_elective\" name=\"Other_elective\"\n                                                placeholder=\"Maths/Physics Elective\"\n                                                className=\"form-control\"\n                                                validators={{\n                                                    required\n                                                }}\n                                            />\n                                            <Errors\n                                                className=\"text-danger\"\n                                                model=\".Other_elective\"\n                                                show=\"touched\"\n                                                messages={{\n                                                    required: 'Required',\n                                                }}\n                                            />\n                                        </Col>\n                                    </Row>\n\n                                    <Row className=\"form-group text-center\">\n                                        <Col>\n                                            <Button type=\"submit\" color=\"primary\">\n                                                Send!\n                                            </Button>\n                                        </Col>\n                                    </Row>\n                                </LocalForm>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\nexport default FormComponent","import React from 'react'\nimport Main from './components/Main'\nimport Form from './components/Form'\nimport subjectCode from './data/subjectCode.json'\nimport './App.css'\n\nfunction App() {\n\n  const schedule = JSON.parse(window.localStorage.getItem('schedule'))\n\n  if (schedule === null) {\n    return (\n      <Form />\n    )\n  }\n  else {\n    return (\n      <Main\n        schedule={schedule}\n        subjectCode={subjectCode}\n      />\n    )\n  }\n\n}\n\nexport default App\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.register()\n    })\n  }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}