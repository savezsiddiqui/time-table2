{"version":3,"sources":["components/Main.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","subject","location","time","index","classHour","parseInt","slice","indexOf","hour","moment","format","isoWeekday","endsWith","react_default","a","createElement","Col","xs","className","Main","state","onPageChange","direction","_this","setState","this","window","localStorage","removeItem","reload","_this2","_this$props","props","schedule","subjectCode","item","RenderData","Object","keys","forEach","key","length","str","time1","push","CardRender","map","Main_Card","style","height","width","Container","fluid","Row","day","margin","dist_default","orientation","responsive","loopForever","animationDuration","startAt","Button","border","textDecoration","onClick","Reset","Component","required","val","regex","match","Option","name","code","value","FormComponent","values","console","log","batch","CS_elective","HSS_elective","elective","Other_elective","batchRegex","RegExp","mySchedule","Schedule","newObject","filter","element","setItem","JSON","stringify","HSS_subjects","Other_subjects","includes","sm","lib","onSubmit","handleSubmit","initialState","text","model","id","placeholder","validators","show","messages","select","Form_Option","type","color","App","parse","getItem","Form","components_Main","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9e3369d8.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Container, Row, ButtonGroup, Button, Col } from 'react-bootstrap'\nimport FlipPage from 'react-flip-page'\nimport moment from 'moment'\n\nconst Card = ({ subject, location, time, index }) => {\n\n    let classHour = parseInt(time.slice(0, time.indexOf('-')))\n    let hour = parseInt(moment().format('h'))\n\n    if (index === moment().isoWeekday() - 1 && (hour === classHour) || \n        subject.endsWith('Lab') && hour === classHour + 1) {\n        return (\n            <Col xs={12} className='box'>\n                <p className='mb-0'>{subject}</p>\n                <p className='mt-0'>{time} | {location}</p>\n            </Col>\n        )\n    }\n    else {\n        return (\n            <Col xs={12}>\n                <p className='mb-0'>{subject}</p>\n                <p className='mt-0'>{time} | {location}</p>\n            </Col>\n        )\n    }\n\n}\n\nclass Main extends Component {\n\n    state = {\n        index: moment().isoWeekday() === 7 ? 5 : moment().isoWeekday() - 1,\n    }\n\n    onPageChange = (index, direction) => {\n        this.setState({\n            index\n        })\n    }\n\n    onClickLeft() {\n        this.setState({\n            index: this.state.index === 0 ? 5 : this.state.index - 1\n        })\n    }\n\n    onClickRight() {\n        this.setState({\n            index: this.state.index === 5 ? 0 : this.state.index + 1\n        })\n    }\n\n    Reset() {\n        window.localStorage.removeItem('schedule')\n        window.location.reload()\n    }\n\n    render() {\n\n        const { schedule, subjectCode } = this.props\n        const item = schedule[this.state.index]\n        let RenderData = []\n\n        Object.keys(item)\n            .forEach((key, index) => {\n                if (index > 0 && item[key].length > 0) {\n\n                    let str = item[key][0]\n                    let time = ''\n                    let subject = subjectCode[str.slice(str.indexOf('(') + 1,\n                        str.indexOf(')'))]\n                    let location = str.slice(str.indexOf(')') + 2, str.indexOf('/'))\n\n                    if (subject.endsWith('Lab')) {\n                        let time1 = parseInt(key.slice(0, key.indexOf('-')))\n                        time = time1 + '-' + (time1 + 1) + ':50' + key.slice(key.length - 2, key.length)\n                    }\n                    else\n                        time = key\n                    RenderData.push({ time, subject, location })\n                }\n            })\n\n        const CardRender = RenderData.map(item => {\n            return <Card\n                subject={item.subject}\n                style={{ height: 300, width: 100 }}\n                location={item.location}\n                time={item.time}\n                index={this.state.index} />\n        })\n\n        return (\n\n            <Container fluid className='text-center my_container'>\n                <Row>\n                    <Col xs={12}>\n                        <h2 className='mt-4'>{schedule[this.state.index].day}</h2>\n                    </Col>\n                    <div className=\"flip-root mb-2\" style={{ margin: 'auto' }}>\n                        <FlipPage\n                            orientation='horizontal'\n                            responsive={true}\n                            loopForever={true}\n                            onPageChange={this.onPageChange}\n                            animationDuration={300}\n                            startAt={0}\n                        >\n                            <div className=\"card_list\">{CardRender}</div>\n                            <div className=\"card_list\">{CardRender}</div>\n                            <div className=\"card_list\">{CardRender}</div>\n                            <div className=\"card_list\">{CardRender}</div>\n                            <div className=\"card_list\">{CardRender}</div>\n                            <div className=\"card_list\">{CardRender}</div>\n                        </FlipPage>\n                    </div>\n                    {/* <Col xs={12}>\n                        <ButtonGroup>\n                            <Button variant=\"secondary\"\n                                onClick={() => this.onClickLeft()}\n                            >Left</Button>\n                            <Button variant=\"secondary\"\n                                onClick={() => this.onClickRight()}\n                            >Right</Button>\n                        </ButtonGroup>\n                    </Col> */}\n                </Row>\n                <Button\n                    className='fixed'\n                    style={{ border: 0, textDecoration: 'underline' }}\n                    onClick={() => this.Reset()}\n                >Reset\n                </Button>\n            </Container >\n        )\n    }\n}\n\nexport default Main","import React, { Component } from 'react'\nimport { Button, Row, Col, Container } from 'react-bootstrap'\nimport { Control, LocalForm, Errors } from 'react-redux-form'\nimport Schedule from '../data/schedule.json'\nimport subjectCode from '../data/subjectCode.json'\n\nconst required = (val) => val && val.length \nconst regex = (val) => val && val.match(/[A-Z]\\d{1,2}$/)\n\nconst Option = ({ name, code }) => {\n    return (\n        <option value={code}>{name}</option>\n    )\n}\n\nclass FormComponent extends Component {\n\n    handleSubmit(values) {\n\n        console.log(values)\n\n        const batch = values.batch\n        const CS_elective = values.CS_elective\n        const HSS_elective = values.HSS_elective\n        const elective = values.Other_elective\n\n        const batchRegex = batch.length == 2 ?\n            '(' + batch + '|' + 'LAB\\\\(' + '|' + batch[0] + '[1-' + batch[1] +\n            ']-([' + batch[1] + '-9]|1\\\\d))'\n            : '(' + batch + '|' + 'LAB\\\\(' + '|' + batch[0] + '.*(1[0-' + batch[2] +\n            ']-1[' + batch[2] + '-4]|,' + batch.slice(1, 3) + ')' + ')'\n\n        const CS_elect_lab = CS_elective === 'CI514' ? 'CI574' : 'CI573'\n        const compulsory = 'CI511|CI571|CI575|CI576'\n        const regex = new RegExp(batchRegex + \".*(\" + HSS_elective + '|' + elective + '|'\n            + CS_elective + '|' + CS_elect_lab + '|' + compulsory + ')')\n        console.log(regex)\n\n        const mySchedule = Schedule.map(item => {\n            let newObject = {}\n            Object.keys(item).forEach((key, index) => {\n\n                if (index === 0)\n                    newObject[key] = item[key]\n                else\n                    newObject[key] = item[key].filter(element => element.match(regex))\n            });\n\n            return newObject\n        })\n\n        console.log(mySchedule)\n        window.localStorage.setItem('schedule', JSON.stringify(mySchedule))\n        window.location.reload()\n    }\n\n    render() {\n\n        let HSS_subjects = []\n        let Other_subjects = []\n        Object.keys(subjectCode).forEach(key => {\n            if (key.includes('HS'))\n                HSS_subjects.push({ name: subjectCode[key], code: key })\n            if (key.includes('MA') || key.includes('PH'))\n                Other_subjects.push({ name: subjectCode[key], code: key })\n        })\n\n        return (\n            <Container>\n                <Row className='justify-content-center' >\n                    <Col xs={12} sm={4}>\n                        <Row>\n                            <Col xs={12} className='text-center mt-4'>\n                                <h2><b>LETS START</b></h2>\n                            </Col>\n                            <Col xs={12} className='mt-4'>\n                                <LocalForm\n                                    onSubmit={(values) => this.handleSubmit(values)}\n                                    initialState={{\n                                        batch: '',\n                                        CS_elective: 'CI514',\n                                        HSS_elective: '16HS531',\n                                        Other_elective: '16MA531',\n                                    }}>\n                                    <Row className=\"form-group\">\n                                        <Col xs={12}>\n                                            <Control.text model=\".batch\"\n                                                id=\"batch\" name=\"batch\"\n                                                placeholder=\"batch\"\n                                                className=\"form-control\"\n                                                validators={{\n                                                    required, regex\n                                                }}\n                                            />\n                                            <Errors\n                                                className=\"text-danger  \"\n                                                model=\".batch\"\n                                                show=\"touched\"\n                                                messages={{\n                                                    required: 'Required',\n                                                    regex: 'Incorrect Format'\n                                                }}\n                                            />\n                                        </Col>\n                                    </Row>\n\n                                    <Row className=\"form-group\">\n                                        <Col xs={12}>\n                                            <Control.select model=\".CS_elective\" id=\"CS_elective\"\n                                                name=\"CS_elective\" className=\"form-control\"\n                                            >\n                                                <option value='CI514'>Artificial Intelligence</option>\n                                                <option value='CI513'>Software Engineering</option>\n                                            </Control.select>\n                                        </Col>\n                                    </Row>\n\n                                    <Row className=\"form-group\">\n                                        <Col xs={12}>\n                                            <Control.select model=\".HSS_elective\"\n                                                id=\"HSS_elective\" name=\"HSS_elective\"\n                                                className=\"form-control\"\n                                            >\n                                                {HSS_subjects.map(item => {\n                                                    return <Option name={item.name}\n                                                        code={item.code} key={item.code} />\n                                                })}\n                                            </Control.select>\n                                        </Col>\n                                    </Row>\n\n                                    <Row className=\"form-group\">\n                                        <Col xs={12}>\n                                            <Control.select model=\".Other_elective\"\n                                                id=\"Other_elective\" name=\"Other_elective\"\n                                                className=\"form-control\"\n                                            >{Other_subjects.map(item => {\n                                                return <Option name={item.name}\n                                                    code={item.code} key={item.code} />\n                                            })}</Control.select>\n                                        </Col>\n                                    </Row>\n\n                                    <Row className=\"form-group text-center\">\n                                        <Col>\n                                            <Button type=\"submit\" color=\"primary\">\n                                                Send!\n                                            </Button>\n                                        </Col>\n                                    </Row>\n                                </LocalForm>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\nexport default FormComponent","import React from 'react'\nimport Main from './components/Main'\nimport Form from './components/Form'\nimport subjectCode from './data/subjectCode.json'\nimport './App.css'\n\nfunction App() {\n\n  const schedule = JSON.parse(window.localStorage.getItem('schedule'))\n\n  if (schedule === null) {\n    return (\n      <Form />\n    )\n  }\n  else {\n    return (\n      <Main\n        schedule={schedule}\n        subjectCode={subjectCode}\n      />\n    )\n  }\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}